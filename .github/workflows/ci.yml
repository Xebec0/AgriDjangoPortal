name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit bandit safety
        pip install -r requirements.txt --ignore-installed || true
        
    - name: Run pip-audit for CVE scanning
      run: pip-audit --requirement requirements.txt --format=json --output=audit-report.json
      continue-on-error: true
        
    - name: Run bandit security scan
      run: bandit -r . -x venv/ -f json -o bandit-report.json
      continue-on-error: true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          audit-report.json
          bandit-report.json

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install only core dependencies first
        pip install Django>=5.2.7 python-dotenv pytest pytest-django coverage black flake8
        # Try to install optional dependencies, ignore failures
        pip install redis django-redis django-cachalot || true
        pip install sentry-sdk django-ratelimit || true
        # Install remaining requirements, ignoring failures for optional deps
        pip install -r requirements.txt || true
        
    - name: Lint with flake8
      run: |
        # Stop build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv,__pycache__,.git,migrations
        # Exit-zero treats all errors as warnings  
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=venv,__pycache__,.git,migrations
        
    - name: Format check with black
      run: black --check . --exclude="venv|migrations|__pycache__|.git" || echo "Black formatting issues found, but continuing..."
      
    - name: Run Django system checks
      run: |
        export SECRET_KEY='test-secret-key-for-ci-12345678901234567890123456789012'
        export DEBUG=False
        export DJANGO_SETTINGS_MODULE='agrostudies_project.settings'
        python manage.py check
        
    - name: Run tests with coverage
      run: |
        export SECRET_KEY='test-secret-key-for-ci-12345678901234567890123456789012'
        export DEBUG=True
        export DJANGO_SETTINGS_MODULE='agrostudies_project.settings'
        coverage run --source='.' manage.py test core.tests
        coverage report --show-missing
        coverage xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  deploy:
    needs: [security-scan, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Render
      run: |
        echo "Deployment would trigger Render auto-deploy from main branch"
        # Render auto-deploys from main branch when connected to GitHub
